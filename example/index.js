// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var ADD, CENTER, Cubic, GREEN, Phaser, SECOND, VIOLET, _line, createGui, dat;

  dat = this.dat, Phaser = this.Phaser;

  CENTER = Phaser.CENTER;

  ADD = Phaser.blendModes.ADD;

  Cubic = Phaser.Easing.Cubic;

  GREEN = "rgba(0,255,0,0.5)";

  VIOLET = "rgba(255,0,255,0.5)";

  SECOND = 1000;

  _line = new Phaser.Line;

  Phaser.Pointer.prototype.toString = function() {
    return "[Pointer ID " + this.id + "]";
  };

  Phaser.Sprite.prototype.toString = function() {
    return "[Sprite: " + (this.name || ("[" + this.key + "]")) + "]";
  };

  createGui = function(ship, sprite, flames) {
    var folder, folders, gui, i, j, len, len1, method, name, obj, offsetFolder, ref, ref1, trackOffset;
    gui = new dat.GUI;
    folders = {};
    ref = [ship, sprite, flames];
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      name = obj.name;
      folder = folders[name] = gui.addFolder(name);
      if (obj.on != null) {
        folder.add(obj, "on");
      }
      ref1 = ["destroy", "kill", "revive"];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        method = ref1[j];
        folder.add(obj, method);
      }
      if (obj.reset) {
        folder.add(obj, "reset");
      }
      if (obj.data.trackTarget) {
        folder.add(obj, "untrack");
      }
      trackOffset = obj.data.trackOffset;
      if (trackOffset) {
        offsetFolder = folder.addFolder("trackOffset");
        offsetFolder.add(trackOffset, "x", -250, 250, 5);
        offsetFolder.add(trackOffset, "y", -250, 250, 5);
        offsetFolder.open();
      }
      folder.open();
    }
    folders.state = gui.addFolder("game.state");
    folders.state.add(ship.game.state, "restart");
    folders.state.open();
    return gui;
  };

  window.GAME = new Phaser.Game({
    renderer: Phaser.CANVAS,
    state: {
      init: function() {
        var debug;
        debug = this.game.debug;
        debug.font = "16px Consolas, Menlo, monospace";
        debug.lineHeight = 25;
      },
      preload: function() {
        this.load.baseURL = "https://cdn.jsdelivr.net/gh/samme/phaser-examples-assets@v2.0.0/assets/";
        this.load.crossOrigin = "anonymous";
        this.load.image("dude", "sprites/phaser-dude.png");
        this.load.image("ship", "sprites/ship.png");
        this.load.image("star", "demoscene/star.png");
        this.load.image("star2", "demoscene/star2.png");
      },
      create: function() {
        var flames, ship, sprite, stars;
        this.physics.arcade.gravity.y = 60;
        ship = this.ship = this.add.sprite(0, 0, "ship");
        ship.name = "ship";
        ship.anchor.set(0.5);
        ship.alignIn(this.world.bounds, CENTER);
        ship.inputEnabled = true;
        ship.input.enableDrag();
        ship.input.useHandCursor = true;
        this.physics.enable(ship);
        ship.body.allowGravity = false;
        ship.body.angularVelocity = 30;
        sprite = this.sprite = this.add.sprite(0, 0, "dude");
        sprite.name = "dude";
        sprite.anchor.set(0.5);
        this.physics.enable(sprite);
        sprite.body.angularVelocity = 60;
        sprite.track(ship, {
          offsetX: 0,
          offsetY: -80,
          trackRotation: true,
          rotateOffset: true
        });
        flames = this.flames = this.add.emitter(0, 0, 20).setAlpha(0.75, 0, 4 * SECOND, Cubic.Out).setRotation(-360, 360).setScale(4, 1, 4, 1, 4 * SECOND, Cubic.Out).setXSpeed(-25, 25).setYSpeed(-25, 75).makeParticles("star").flow(2 * SECOND, 100);
        flames.name = "flames";
        flames.blendMode = ADD;
        flames.gravity = -60;
        flames.track(ship, {
          offsetX: 0,
          offsetY: 35,
          trackRotation: false,
          rotateOffset: true
        });
        stars = this.stars = this.add.emitter(0, 0, 10).setAlpha(1, 0, 2 * SECOND).makeParticles("star2").flow(SECOND, 100);
        stars.name = "stars";
        stars.blendMode = ADD;
        stars.gravity = -30;
        stars.track(this.input.activePointer);
        this.add.text(20, 560, "Drag the ship around (↑) or kill/revive/destroy it (→)", {
          fill: "#E800B0",
          font: "bold " + this.game.debug.font
        });
        this.gui = createGui(ship, sprite, flames);
      },
      render: function() {
        var debug, dx, dy, x, y;
        debug = this.game.debug;
        x = 20;
        y = 30;
        dx = 320;
        dy = 145;
        this.debugTracking(this.sprite, x, y);
        if (this.sprite.body) {
          debug.object(this.sprite.body, x + dx, y, {
            color: "auto",
            keys: ["moves"],
            label: "dude.body",
            sort: true
          });
        }
        if (this.sprite.trackTarget) {
          this.debugLine(this.sprite.trackTarget.x, this.sprite.trackTarget.y, this.sprite.x, this.sprite.y, GREEN);
        }
        this.debugTracking(this.flames, x, y += dy);
        if (this.flames.trackTarget) {
          this.debugLine(this.flames.trackTarget.x, this.flames.trackTarget.y, this.flames.emitX, this.flames.emitY, VIOLET);
        }
        this.debugTracking(this.stars, x, y += dy);
        debug.object(this.ship, x, y += dy, {
          color: "auto",
          keys: ["exists"],
          label: "ship"
        });
      },
      shutdown: function() {
        this.gui.destroy();
      },
      debugLine: function(startX, startY, endX, endY, color) {
        _line.setTo(startX, startY, endX, endY);
        if (_line.length > 0) {
          this.game.debug.geom(_line, color);
        }
      },
      debugTracking: function(obj, x, y) {
        this.game.debug.pixel(obj.x, obj.y);
        this.game.debug.object(obj, x, y, {
          color: "auto",
          label: obj.name,
          keys: ["trackTarget", "trackTargetX", "trackTargetY"]
        });
      },
      debugTrackingData: function(obj, x, y) {
        this.game.debug.object(obj.data, x, y, {
          color: "auto",
          label: obj.name + ".data",
          sort: true
        });
      }
    }
  });

}).call(this);
