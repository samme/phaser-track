// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var Emitter, Phaser, Point, Sprite, _emitterDestroy, _point, extend, getTrackTarget, install, trackComponent;

  Phaser = this.Phaser;

  Point = Phaser.Point, Sprite = Phaser.Sprite;

  Emitter = Phaser.Particles.Arcade.Emitter;

  extend = Phaser.Utils.extend;

  _point = new Phaser.Point;

  _emitterDestroy = Emitter.prototype.destroy;

  Emitter.prototype.destroy = function() {
    _emitterDestroy.call(this);
    if (this.data) {
      this.data = {};
    }
  };

  getTrackTarget = function() {
    return this.data.trackTarget;
  };

  install = function(obj) {
    if (!obj.postUpdate) {
      throw new Error("Object has no 'postUpdate' method");
    }
    obj._trackComponentOrigPostUpdate = obj.postUpdate;
    extend(obj, trackComponent);
    obj._setTrackUpdate();
    Object.defineProperty(obj, "trackTarget", {
      get: getTrackTarget
    });
    Object.defineProperty(obj, "trackTargetX", {
      get: obj._trackTargetX
    });
    Object.defineProperty(obj, "trackTargetY", {
      get: obj._trackTargetY
    });
    return obj;
  };

  trackComponent = {
    postUpdate: function() {
      var ref, result, target, targetX, targetY, trackOffset, trackRotateOffset, trackRotation, x, y;
      result = this._trackComponentOrigPostUpdate.apply(this, arguments);
      if (!(this.exists && this.data)) {
        return result;
      }
      target = this.trackTarget;
      if (!target) {
        return result;
      }
      if (target.pendingDelete || target.destroyPhase || target.game === null || target.active === false) {
        this.untrack();
        return result;
      }
      ref = this.data, trackOffset = ref.trackOffset, trackRotation = ref.trackRotation, trackRotateOffset = ref.trackRotateOffset;
      targetX = this._trackTargetX();
      targetY = this._trackTargetY();
      x = targetX + trackOffset.x;
      y = targetY + trackOffset.y;
      this._trackUpdate(x, y, targetX, targetY, trackRotation, trackRotateOffset, target.worldRotation);
      return result;
    },
    _setTrackTargetGetters: function(obj) {
      switch (false) {
        case obj.worldX == null:
          this.data.trackTargetGetX = this._trackTargetGetWorldX;
          this.data.trackTargetGetY = this._trackTargetGetWorldY;
          break;
        case obj.world == null:
          this.data.trackTargetGetX = this._trackTargetGetWorldPointX;
          this.data.trackTargetGetY = this._trackTargetGetWorldPointY;
          break;
        case obj.position == null:
          this.data.trackTargetGetX = this._trackTargetGetPositionX;
          this.data.trackTargetGetY = this._trackTargetGetPositionY;
          break;
        default:
          this.data.trackTargetGetX = this._trackTargetGetX;
          this.data.trackTargetGetY = this._trackTargetGetY;
      }
    },
    _unsetTrackTargetGetters: function() {
      this.data.trackTargetGetX = null;
      this.data.trackTargetGetY = null;
    },
    track: function(obj, options) {
      var base;
      if (options == null) {
        options = {};
      }
      if (this.data == null) {
        this.data = {};
      }
      this.data.trackTarget = obj;
      if ((base = this.data).trackOffset == null) {
        base.trackOffset = new Point;
      }
      this.data.trackOffset.x = options.offsetX || 0;
      this.data.trackOffset.y = options.offsetY || 0;
      this.data.trackRotation = options.trackRotation || false;
      this.data.trackRotateOffset = options.rotateOffset || false;
      if (this.body && this.body.moves && options.disableBodyMoves) {
        this.body.moves = false;
        this.data.trackDisableBodyMoves = true;
      } else {
        this.data.trackDisableBodyMoves = false;
      }
      this._setTrackTargetGetters(obj);
    },
    _trackTargetGetPositionX: function(target) {
      return target.position.x;
    },
    _trackTargetGetPositionY: function(target) {
      return target.position.y;
    },
    _trackTargetGetWorldPointX: function(target) {
      return target.world.x;
    },
    _trackTargetGetWorldPointY: function(target) {
      return target.world.y;
    },
    _trackTargetGetWorldX: function(target) {
      return target.worldX;
    },
    _trackTargetGetWorldY: function(target) {
      return target.worldY;
    },
    _trackTargetGetX: function(target) {
      return target.x;
    },
    _trackTargetGetY: function(target) {
      return target.y;
    },
    _trackTargetX: function() {
      if (this.data.trackTarget) {
        return this.data.trackTargetGetX(this.data.trackTarget);
      } else {
        return null;
      }
    },
    _trackTargetY: function() {
      if (this.data.trackTarget) {
        return this.data.trackTargetGetY(this.data.trackTarget);
      } else {
        return null;
      }
    },
    _trackUpdate: function() {},
    _setTrackUpdate: function() {
      this._trackUpdate = this.constructor === Emitter ? this._trackUpdateEmitter : this._trackUpdateSprite;
    },
    _trackUpdateEmitter: function(x, y, targetX, targetY, trackRotation, rotateOffset, rotation) {
      this.emitX = x;
      this.emitY = y;
      if (trackRotation && (rotation != null)) {
        this.rotation = rotation;
      }
      if (rotateOffset && (rotation != null)) {
        this._trackRotateEmit(x, y, targetX, targetY, rotation);
      }
    },
    _trackRotateEmit: function(x, y, targetX, targetY, rotation) {
      _point.set(x, y).rotate(targetX, targetY, rotation);
      this.emitX = _point.x;
      this.emitY = _point.y;
    },
    _trackUpdateSprite: function(x, y, targetX, targetY, trackRotation, rotateOffset, rotation) {
      this.position.set(x, y);
      if (trackRotation && (rotation != null)) {
        this.rotation = rotation;
      }
      if (rotateOffset && (rotation != null)) {
        this.position.rotate(targetX, targetY, rotation);
      }
    },
    untrack: function() {
      this.data.trackOffset.set(0);
      this.data.trackRotateOffset = null;
      this.data.trackRotation = null;
      this.data.trackTarget = null;
      if (this.body && this.data.trackDisableBodyMoves) {
        this.body.moves = true;
      }
      this.data.trackDisableBodyMoves = null;
      this._unsetTrackTargetGetters();
    }
  };

  install(Emitter.prototype);

  install(Sprite.prototype);

}).call(this);
